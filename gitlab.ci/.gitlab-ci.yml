stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_PROJECT_PATH

test:
  stage: test
  image: node:18-alpine
  before_script:
    - cd mpay_app
    - npm ci
  script:
    - npm run lint
    - npm run build
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA -t $REGISTRY/$IMAGE_NAME:latest ./mpay_app
    - docker push $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $REGISTRY/$IMAGE_NAME:latest
  only:
    - main
    - develop

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SERVER_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
        # Login to registry
        echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
        
        # Pull latest image
        docker pull $REGISTRY/$IMAGE_NAME:latest
        
        # Stop and remove existing container
        docker stop mpay-app || true
        docker rm mpay-app || true
        
        # Run new container
        docker run -d \
          --name mpay-app \
          --restart unless-stopped \
          -p 80:80 \
          -e NODE_ENV=production \
          $REGISTRY/$IMAGE_NAME:latest
        
        # Clean up old images
        docker image prune -f
        
        echo "Deployment completed successfully!"
      EOF
  only:
    - main
  environment:
    name: production
    url: http://$SERVER_HOST 